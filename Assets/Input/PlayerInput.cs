//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""634ff493-a55f-4fa1-8306-f92b7883345a"",
            ""actions"": [
                {
                    ""name"": ""Division"",
                    ""type"": ""Button"",
                    ""id"": ""61041ad8-687c-4618-a8d0-b6fca0a6191d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveArrows"",
                    ""type"": ""Value"",
                    ""id"": ""79c6b519-7dcf-4325-81e5-7b8f8f161494"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveMouse"",
                    ""type"": ""Value"",
                    ""id"": ""660f736a-02d2-48df-8bc5-b8ebbeacccd8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""169889bf-e3b8-4433-a355-0155ef391ec3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Division"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""09635ac0-4d8f-4245-9d56-a64f44d90ee7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveArrows"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bc543f2b-e1ae-4c56-ad9e-936fb9819844"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f6e6de44-d649-4158-94c6-835b1e4cb638"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e8b846a2-c7dd-490d-b5d4-a404b8565dd9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""15939c04-4641-42ae-9da6-3aec115918e3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0608a98b-5682-437b-9650-c39f1252f012"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Division = m_Player.FindAction("Division", throwIfNotFound: true);
        m_Player_MoveArrows = m_Player.FindAction("MoveArrows", throwIfNotFound: true);
        m_Player_MoveMouse = m_Player.FindAction("MoveMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Division;
    private readonly InputAction m_Player_MoveArrows;
    private readonly InputAction m_Player_MoveMouse;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Division => m_Wrapper.m_Player_Division;
        public InputAction @MoveArrows => m_Wrapper.m_Player_MoveArrows;
        public InputAction @MoveMouse => m_Wrapper.m_Player_MoveMouse;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Division.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDivision;
                @Division.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDivision;
                @Division.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDivision;
                @MoveArrows.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveArrows;
                @MoveArrows.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveArrows;
                @MoveArrows.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveArrows;
                @MoveMouse.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveMouse;
                @MoveMouse.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveMouse;
                @MoveMouse.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveMouse;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Division.started += instance.OnDivision;
                @Division.performed += instance.OnDivision;
                @Division.canceled += instance.OnDivision;
                @MoveArrows.started += instance.OnMoveArrows;
                @MoveArrows.performed += instance.OnMoveArrows;
                @MoveArrows.canceled += instance.OnMoveArrows;
                @MoveMouse.started += instance.OnMoveMouse;
                @MoveMouse.performed += instance.OnMoveMouse;
                @MoveMouse.canceled += instance.OnMoveMouse;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnDivision(InputAction.CallbackContext context);
        void OnMoveArrows(InputAction.CallbackContext context);
        void OnMoveMouse(InputAction.CallbackContext context);
    }
}
